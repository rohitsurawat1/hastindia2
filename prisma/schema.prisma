// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  artisan       Artisan?
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Artisan {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopName    String
  bio         String?
  region      String
  phone       String?
  address     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("artisans")
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  story           String?
  category        String
  price          Decimal
  compareAtPrice  Decimal?
  sku            String    @unique
  stock          Int       @default(0)
  images         String[]
  featured       Boolean   @default(false)
  dimensions     String?
  weight         String?
  material       String?
  careInstructions String?
  artisanId      String
  artisan        Artisan   @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        OrderStatus @default(PENDING)
  items         OrderItem[]
  total         Decimal
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

enum Role {
  ADMIN
  ARTISAN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}